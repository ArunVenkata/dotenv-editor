#!/bin/bash

###
# Release version & libraries too check
###
VERSION="0.2.2"
TEST_DEPENDENCIES="sed awk sort uniq grep"
TEST_UI_LIBS="dialog whiptail"

###
# Global variables
###
DIALOG=""
MENU_LIST=""
MENU_OPTIONS=""
DOTENV_FILE_ORIG=".env"
DOTENV_FILE_TMP="/tmp/dotenv-editor-$$"
SELECTED_ITEM=""
CURRENT=""

###
# Console color variables
###
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_ORANGE='\033[0;33m'
COLOR_NONE='\033[0m' # No Color

# UI modes
MODE_GROUP="OFF"
MODE_CHECKBOX="OFF"

# Group specific options
GROUP_MAX_DEPTH=0

# Compatibility modes
COMPAT_QUOTE="OFF"


###
# Check if all required dependencies have been installed. 
###
function checkDependencies() {
    ERROR=""

    echo "Checking if required dependencies are available" >> $LOG_FILE
    for COMMAND in $TEST_DEPENDENCIES; do
        if ! [ -x "$(command -v $COMMAND)" ]; then
            echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $COMMAND is not installed!" >&2
            ERROR="$COMMAND is not installed!"
        else
            echo -e " ${COLOR_GREEN}OK${COLOR_NONE}  : $COMMAND is available." >&2
        fi
    done
    echo ""

    echo "Checking if one of the UI libraries ($TEST_UI_LIBS) is available"
    UI_LIBS_AVAILABLE=""
    for UI_LIB in $TEST_UI_LIBS; do
        if ! [ -x "$(command -v $UI_LIB)" ]; then
            echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $UI_LIB is not installed!" >&2
            ERROR="$UI_LIB is not available!"
        else
            if [ "$DIALOG" == "" ]; then
                echo -e " ${COLOR_GREEN}OK${COLOR_NONE}  : $UI_LIB is selected." >&2
                DIALOG=$UI_LIB
            else
                echo -e " ${COLOR_ORANGE}OK${COLOR_NONE}  : $UI_LIB is available." >&2
            fi
            UI_LIBS_AVAILABLE="$UI_LIBS_AVAILABLE $UI_LIB"
        fi
    done
    echo ""

    if [ "$ERROR" != "" ]; then
        echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $ERROR" >&2
        exit 1;
    fi

    echo "All required dependencies are available!"
    echo "Using the UI library: $DIALOG"
    echo ""
}


### 
# Determine if .env file exists or create a new file by copying one of the 
# .env-* files as a starting point.
###
function determineDotEnvFile() {

    echo "Check of existing .env file: $DOTENV_FILE_ORIG\n" >> $LOG_FILE;
    if [ -f $DOTENV_FILE_ORIG ]; then
        echo "-> file exists: $DOTENV_FILE_ORIG\n" >> $LOG_FILE;
        cp $DOTENV_FILE_ORIG $DOTENV_FILE_TMP;
        source $DOTENV_FILE_TMP
        return 1
    fi

    # Detect .env-* files
    SAMPLE_FILES=`ls .env-*`
    MENU_LIST=""
    for FILE in $SAMPLE_FILES; do
        MENU_LIST="$MENU_LIST $FILE $FILE ";
    done
    menu;

    DOTENV_FILE_ORIG=$SELECTED_ITEM
    cp $SELECTED_ITEM $DOTENV_FILE_TMP;
    SELECTED_ITEM=""

    source $DOTENV_FILE_TMP
}


###
# Welcome: display a nice and warm welcome message.
###
function welcomeMessage() {
    $($DIALOG \
        --title "Dotenv Editor - Welcome" \
        --clear \
        --msgbox "$APP_TITLE\n\nThis setup will guide you through configuring all the existing variables.\n\nTheir defaults are already prefilled, so hit ENTER to go the next one." \
        20 80 \
        3>&1 1>&2 2>&3)

}


###
# Menu: Display a menu using dialog/whiptail with the provided options. The
# return value is the selected item.
###
function menu() {
    # MENU_LIST= $1
    TITLE_SELECTED=""
    EXIT_OR_GO_BACK="Exit"
    if [ "$SELECTED_ITEM" != "" ]; then
        TITLE_SELECTED=" - $SELECTED_ITEM"
        EXIT_OR_GO_BACK="Back"
    fi

    MENU_COMMAND="$DIALOG --cancel-button \"$EXIT_OR_GO_BACK\" --title \"Dotenv Editor $TITLE_SELECTED \" --menu \"Choose an option\" 20 80 12 $MENU_LIST 3>&1 1>&2 2>&3"
    SELECTED_ITEM=$(eval $MENU_COMMAND);
    EXIT_STATUS=$?
    [[ "$EXIT_STATUS" = 1 ]] && [[ "$EXIT_OR_GO_BACK" == "Exit" ]] && saveChangesOrExit;    #test if exit button is pressed

    # return '$SELECTED_ITEM';
}


###
# Update value: Update a variable by using the dialog/whiptail textbox.
###
function updateVariable() {
    # Parameters
    KEY=$1
    OLD=${!KEY}

    # Show dialog
    NEW=$($DIALOG \
        --clear \
        --inputbox "$KEY" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)

    if [ "$OLD" != "$NEW" ]; then
        echo "Updating $KEY: $OLD => $NEW" >> $LOG_FILE;

        # echo "Replacing key: $VAR => $VALUE"
        if [[ "$COMPAT_QUOTE" == "ON" ]]; then
            sed -i "s/$KEY=.*/$KEY=\"$NEW\"/" $DOTENV_FILE_TMP
        elif [[ $NEW = *\ * ]]; then
            sed -i "s/$KEY=.*/$KEY=\"$NEW\"/" $DOTENV_FILE_TMP
        else
            sed -i "s/$KEY=.*/$KEY=$NEW/" $DOTENV_FILE_TMP
        fi

        # Resource the file to update the global variables
        source $DOTENV_FILE_TMP

    else
        echo "No change $KEY: $OLD => $NEW" >> $LOG_FILE;
    fi
}


function viewSettings() {
    FEATURES=$($DIALOG \
        --title "Settings" \
        --checklist \
        --output-fd 1 \
        "Modify settings according to your preferences" 20 78 4 \
        "-\>GROUP" "Enable grouping variables by separator (_)" $MODE_GROUP \
        "-\>CHECKBOX" "Allow connections from other hosts" $MODE_CHECKBOX \
        "-\>QUOTE" "Quote variables with a '\"'" $COMPAT_QUOTE \
        )
    RETVAT=$?
    CHOICE_PACKAGES=$RETVAL;

    # Reset all features to defaults
    MODE_GROUP="OFF"
    MODE_CHECKBOX="OFF"
    COMPAT_QUOTE="OFF"

    # Update features with selected op tions
    for FEATURE in $FEATURES; do
        echo "FEATURE: $FEATURE";
        if [[ $FEATURE = *GROUP* ]]; then
        # if [[ "$FEATURE" == "-\>GROUP" ]]; then
            echo "ENABLING GROUPING!";
            MODE_GROUP="ON"
        fi
        if [[ $FEATURE = *CHECKBOX* ]]; then
            echo "ENABLING CHECKBOX!";
            MODE_CHECKBOX="ON"
        fi
        if [[ $FEATURE = *QUOTE* ]]; then
            echo "ENABLING QUOTE!";
            COMPAT_QUOTE="ON"
        fi
    done;
}


function saveChangesOrExit() {
    # Check if tmp file differs from orig file.
    diffTmpVsOrigFile;
    if [ -s $DOTENV_FILE_TMP.diff ]; then
        dialog --title "Dotenv Editor - Save Changes?" \
            --yesno "Are you sure you want to save the changes to \"$DOTENV_FILE_ORIG\"?" 7 60

        # Get exit status
        # 0 means user hit [yes] button.
        # 1 means user hit [no] button.
        # 255 means user hit [Esc] key.
        response=$?
        case $response in
           0)
                echo "Overwriting original file with changes.";
                cp $DOTENV_FILE_TMP $DOTENV_FILE_ORIG
                ;;
           1)
                echo "Changes discarded.";

                ;;
           255)
                echo "[ESC] key pressed."
                ;;
        esac
    fi

    # Cleann up any other tmp files
    rm /tmp/dotenv-editor-*

    # Exit application
    exit;
}


function diffTmpVsOrigFile () {
    diff --color $DOTENV_FILE_ORIG $DOTENV_FILE_TMP > $DOTENV_FILE_TMP.diff
}


###
# Main: show the main menu of (grouped) topics based on the select prefix. The
# main program keeps running until the user has selected a topic or exited the
# application.
###
function mainLoop() {

    # menu
    # echo "SELECTED: $SELECTED_ITEM"

    case $SELECTED_ITEM in
        Exit) #Exit the dotenv editor application
            # clear;
            saveChangesOrExit
            ;;

        *SAVE) # Save the   
            # clear;
            echo "Saving tmp file to orig file";
            cp $DOTENV_FILE_TMP $DOTENV_FILE_ORIG
            source $DOTENV_FILE_ORIG
            SELECTED_ITEM=""
            ;;

        *VIEW_DIFF) #Exit the dotenv editor application
            # clear;
            diffTmpVsOrigFile
            BLA=$(dialog --scrollbar --textbox $DOTENV_FILE_TMP.diff 30 80 3>&1 1>&2 2>&3)
            rm "$DOTENV_FILE_TMP.diff"
            SELECTED_ITEM=""
            ;;

        *RESET) # Reset changes
            cp $DOTENV_FILE_ORIG $DOTENV_FILE_TMP
            source $DOTENV_FILE_TMP
            SELECTED_ITEM=""
            ;;

        *SETTINGS) # Reset changes
            MENU_LIST="$MENU_LIST GROUP enable\ grouping\ variables\ by\ separator ON "
            viewSettings
            SELECTED_ITEM=""
            ;;


        *)
            if [ "$SELECTED_ITEM" == "Back" ]; then
                CURRENT=`echo "${CURRENT}_${SELECTED_ITEM}" | cut --delimiter='_' --fields=-$DEPTH_LEVEL`
                SELECTED_ITEM=$CURRENT
            fi

            local FULL_SELECT="${SELECTED_ITEM}"
            if [[ "$CURRENT" != "" ]]; then
                FULL_SELECT="${CURRENT}_${SELECTED_ITEM}"
            fi

            # Check if a single option has been chosen
            CNT_MATCHES=`cat $DOTENV_FILE_TMP | grep "$FULL_SELECT=" | wc -l`
            CNT_GROUPS=`cat $DOTENV_FILE_TMP | grep $FULL_SELECT"_" | wc -l`
            if [ $CNT_MATCHES == 1 ]; then
                # echo "MATCH: $SELECTED_ITEM => ${!SELECTED_ITEM}" >> $LOG_FILE;
                # echo "FULL: $FULL_NAME"
                # exit;
                updateVariable $FULL_SELECT

                # echo "CURRENT: $CURRENT";
                # echo "SELECTED_ITEM: $SELECTED_ITEM";
                 
                # SELECTED_ITEM=""
                CURRENT=`echo "${CURRENT}_${SELECTED_ITEM}" | cut --delimiter='_' --fields=-$DEPTH_LEVEL`
                SELECTED_ITEM=$CURRENT

            else
                # echo $SELECTED_ITEM
                CURRENT=$SELECTED_ITEM
                MENU_LIST_GROUPS=""
                MENU_LIST_ITEMS=""
                MENU_LIST_MORE=""
                MENU_LIST=""
                VARIABLE_GROUP=""

                DEPTH_LEVEL=`echo "$CURRENT" | grep -o \_  | wc -l`
                if [ "$CURRENT" != "" ]; then
                    ((DEPTH_LEVEL=DEPTH_LEVEL+1))
                fi

                if [[ "$MODE_GROUP" == "ON" ]]; then
                    echo "GROUP MODE ENABBLED";
                    if [[ $DEPTH_LEVEL -ge $GROUP_MAX_DEPTH ]]; then
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep '^'$CURRENT | cut --delimiter='_' --fields=$((DEPTH_LEVEL+1)) | sort | uniq`

                    elif [[ $DEPTH_LEVEL -gt 0 ]]; then
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep '^'$CURRENT | cut --delimiter='_' --fields=2 | sort | uniq`

                    else 
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | cut --delimiter='_' --fields=1 | sort | uniq`
                    fi

                else
                    VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | sort | uniq`
                fi;

                # Loop over the matched variables (in case of grouping).
                for i in $VARIABLE_GROUP; do
                    if [[ "$MODE_GROUP" == "ON" ]]; then

                        local NUMBER_OF_UNDERSCORES=`echo "$i" | grep -o \_  | wc -l`
                        echo "$i => $NUMBER_OF_UNDERSCORES";

                        local MENU_KEY=""
                        if [[ $NUMBER_OF_UNDERSCORES -gt $GROUP_MAX_DEPTH ]]; then
                            MENU_KEY=`echo $i | awk -F"_" '{print substr($0, index($0, "_"))}'`
                        else
                            MENU_KEY=`echo $i | awk -F"_" '{print $2}'`
                        fi                        

                        CMD_TMP="cat $DOTENV_FILE_TMP | grep "$i=" | wc -l";
                        local FULL_NAME="${CURRENT}_${i}"

                        CNT_ITEMS=`cat $DOTENV_FILE_TMP | grep "$FULL_NAME=" | wc -l`
                        if [ "$CNT_ITEMS" == "1" ]; then
                            VALUE=${!FULL_NAME}
                            MENU_LIST_ITEMS="$MENU_LIST_ITEMS $i \"$VALUE\" "
                        else
                            MENU_LIST_MORE="$MENU_LIST_MORE $i =\>\ more " >> $LOG_FILE;
                        fi

                    else
                        # Default mode: list all variables
                        VALUE=${!i}
                        MENU_LIST_ITEMS="$MENU_LIST_ITEMS $i \"$VALUE\" "
                        # MENU_LIST="$MENU_LIST $i \"$VALUE\" "
                    fi

                    # CNT_ITEMS=`cat $DOTENV_FILE_TMP | grep "$i=" | wc -l`
                    # if [ "$CNT_ITEMS" == "1" ]; then
                    #     VALUE=${!i}
                    #     MENU_LIST="$MENU_LIST $i \"$VALUE\" "
                    # else
                    #     MENU_LIST="$MENU_LIST $i More " >> $LOG_FILE;
                    # fi
              
                done

                if [[ "$MENU_LIST_MORE" != "" ]]; then
                    MENU_LIST="$MENU_LIST $MENU_LIST_MORE "
                fi

                MENU_LIST="$MENU_LIST $MENU_LIST_ITEMS "

                # MENU_LIST=""
                # if [[ "$MENU_LIST_MAIN" != "" ]]; then
                    MENU_LIST="$MENU_LIST \"------------\" \"\" "
                    if [[ `diff --color $DOTENV_FILE_ORIG $DOTENV_FILE_TMP` ]]; then
                        MENU_LIST="$MENU_LIST *VIEW_DIFF \"View differences\" "
                        MENU_LIST="$MENU_LIST *SAVE \"Save changes\" "
                        MENU_LIST="$MENU_LIST *RESET \"Reset changes\" "
                    fi
                    MENU_LIST="$MENU_LIST *SETTINGS \"View current options and/or preferences \" "
                # fi

                menu
            fi

            ;;
    esac
    mainLoop
}


###
# Display the help for this command.
###
function showHelp {
    echo "Usage: dotenv-editor [DIR]"
    echo ""
    echo "Command options:"
    echo "  -f, --file=FILE            use this dotenv configuration file (default: .env)"
    echo "  -l, --log=FILE             use this file for (debug) logging (default: /dev/null)"
    echo "  -v, --version              print program version"
    echo "  -h, --help                 print help info (this screen)"
    echo ""
    echo "Compatibility modes:"
    echo -e "  -q, --quote                quote variables with a '\"'"
    # echo -e "  -k, --keep-comments        keep comments"
    echo ""
    echo "UI features:"
    echo "  -g, --group                enable grouping variables by separator"
    echo "  -c, --checkbox             enable checkboxes for variables called *ENABLED* or"
    echo "                             have a 0 or 1 value"
    echo ""
    # echo "Group mode options:"
    # echo "  -d, --depth=2              stops grouping variables after this depth"
    # echo "  -s, --seperator=_          use a different separator (default: '_')"
    # echo ""
    # echo "Checkbox mode options:"
    # echo "  -c, --checkbox             enable checkboxes for variables called *ENABLED* or"
    # echo "                             have a 0 or 1 value."
    # echo "  -e, --enabled              show checkbox for ENABLE_ variables (set --checkbox to 1)"
    # echo ""
    echo "Specify UI library:"

#if [[ " ${UI_LIBS_AVAILABLE} " =~ " dialog " ]]; then
    echo "  --dialog                   Use the original dialog library"
#fi    
    echo "  --whiptail                 Use the newer whiptail library"
    # echo "  --kdialog                  Use the graphical library for KDE"
    # echo "  --gdialog                  Use the graphical library for Gnome"
    echo ""
}


###
# Display the version of this command.
###
function showVersion {
    echo "dotenv-edit $VERSION"
}


###
# Main application
###

# read the options
TEMP=`getopt -n "$0" -o f::l::h::v::q::g::c:: --long "+env-file,+log-file,help::,version::group::,checkbox::,,quote::,dialog::,whiptail::" -- "$@"`
eval set -- "$TEMP"

# FROM https://www.tutorialspoint.com/unix_commands/getopt.htm
# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -f|--env-file)
            DOTENV_FILE_ORIG=${2#=}
            echo "- receiving option --env-file: $DOTENV_FILE_ORIG";
            shift 2 ;;

        -l|--log-file)
            LOG_FILE=${2#=}
            echo "- receiving option --log-file: $LOG_FILE";
            shift 2 ;;

        -h|--help)
            showHelp;
            exit
            ;;

        -v|--version)
            showVersion;
            exit
            ;;

        # UI modes
        -g|--group)
            echo "- enabling ui mode --group";
            MODE_GROUP="ON"
            GROUP_MAX_DEPTH="2"
            shift 2 ;;

        -c|--checkbox)
            echo "- enabling ui mode --checkbox";
            MODE_CHECKBOX="ON"
            shift 2 ;;

        # Compatibility modes
        -q|--quote)
            echo "- enabling compat mode --quote";
            COMPAT_QUOTE="ON"
            shift 2 ;;

        --dialog)
            TEST_UI_LIBS="dialog $TEST_UI_LIBS"
            echo "- selected UI lib: dialog";
            DIALOG="dialog"
            shift 2 ;;

        --whiptail)
            TEST_UI_LIBS="whiptail $TEST_UI_LIBS"
            echo "- selected UI lib: whiptail";
            DIALOG="whiptail"
            shift 2 ;;

        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

# Set defaults in case optional parameters have not been set.
if [ -z "${DOTENV_FILE_ORIG}" ]; then 
    DOTENV_FILE_ORIG=.env
fi
if [ -z "${LOG_FILE}" ]; then 
    LOG_FILE=/dev/null
fi

# Check dependencies
checkDependencies;

# Display welcome message
#welcomeMessage

# Select .env file (or copy from a sample file)
determineDotEnvFile

# Run the main program.
mainLoop
