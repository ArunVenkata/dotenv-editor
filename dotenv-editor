#!/bin/bash

###
# Release version & libraries too check
###
VERSION="0.4.4"
TEST_DEPENDENCIES="sed awk sort uniq grep"
TEST_UI_LIBS="dialog whiptail"

###
# Global variables
###
DIALOG=""
MENU_LIST=""
MENU_OPTIONS=""
DOTENV_FILE_ORIG=".env"
DOTENV_FILE_TMP="/tmp/dotenv-editor-$$"
SELECTED_ITEM=""
CURRENT=""
LOG_FILE=""
PREV_ITEM=""


###
# Console color variables
###
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_ORANGE='\033[0;33m'
COLOR_NONE='\033[0m' # No Color

# UI modes
MODE_GROUP="OFF"
MODE_CHECKBOX="OFF"
MODE_MODIFY="OFF"

# Group specific options
GROUP_MAX_DEPTH=2

# Compatibility modes
COMPAT_QUOTE="OFF"

# Define the dialog exit status codes
# @see: http://linuxcommand.org/lc3_adv_dialog.php
: ${DIALOG_OK=0}
: ${DIALOG_CANCEL=1}
: ${DIALOG_HELP=2}
: ${DIALOG_EXTRA=3}
: ${DIALOG_ITEM_HELP=4}
: ${DIALOG_ESC=255}


###
# Log helper function
# FROM: https://www.franzoni.eu/quick-log-for-bash-scripts-with-line-limit/
###
function log {
    echo "[$(date --rfc-3339=seconds)]: $*" >> $LOG_FILE
}


###
# Read preferences from ~/.dotenv-editor file
###
function readPreferences() {
    if [ -s ~/.dotenv-editor ]; then
        echo "- preferences found: ~/.dotenv-editor" >> $LOG_FILE;
        source ~/.dotenv-editor;
    fi
}


###
# Check if all required dependencies have been installed. 
###
function checkDependencies() {
    ERROR=""

    echo "" >> $LOG_FILE
    echo "Checking if required dependencies are available" >> $LOG_FILE
    for COMMAND in $TEST_DEPENDENCIES; do
        if ! [ -x "$(command -v $COMMAND)" ]; then
            echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $COMMAND is not installed!" >&2
            ERROR="$COMMAND is not installed!"
        else
            echo -e " ${COLOR_GREEN}OK${COLOR_NONE}  : $COMMAND is available." >&2
        fi
    done
    echo ""

    echo "Checking if one of the UI libraries ($TEST_UI_LIBS) is available"
    UI_LIBS_AVAILABLE=""
    for UI_LIB in $TEST_UI_LIBS; do
        if ! [ -x "$(command -v $UI_LIB)" ]; then
            echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $UI_LIB is not installed!" >&2
            ERROR="$UI_LIB is not available!"
        else
            if [ "$DIALOG" == "" ]; then
                echo -e " ${COLOR_GREEN}OK${COLOR_NONE}  : $UI_LIB is selected." >&2
                DIALOG=$UI_LIB
            else
                echo -e " ${COLOR_ORANGE}OK${COLOR_NONE}  : $UI_LIB is available." >&2
            fi
            UI_LIBS_AVAILABLE="$UI_LIBS_AVAILABLE $UI_LIB"
        fi
    done
    echo ""

    if [ "$ERROR" != "" ]; then
        echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $ERROR" >&2
        exit 1;
    fi

    echo "All required dependencies are available!"
    echo "Using the UI library: $DIALOG"
    echo ""
}


### 
# Determine if .env file exists or create a new file by copying one of the 
# .env-* files as a starting point.
###
CMD_FILE_ARG=$1
function determineDotEnvFile() {
    if [ "$CMD_FILE_ARG" != "" ]; then
        log "Checking for argument file: $CMD_FILE_ARG";
        if [ -f $CMD_FILE_ARG ]; then
            DOTENV_FILE_ORIG=$CMD_FILE_ARG
            log "-> file exists: $DOTENV_FILE_ORIG"
            cp $DOTENV_FILE_ORIG $DOTENV_FILE_TMP;
            source $DOTENV_FILE_TMP
            echo "" >> $LOG_FILE;
            return 1
        fi
    fi

    log "Checking for existing .env file: $DOTENV_FILE_ORIG"
    if [ -f $DOTENV_FILE_ORIG ]; then
        log "-> file exists: $DOTENV_FILE_ORIG"
        cp $DOTENV_FILE_ORIG $DOTENV_FILE_TMP;
        source $DOTENV_FILE_TMP
        echo "" >> $LOG_FILE;
        return 1
    fi

    # Detect .env-* files
    SAMPLE_FILES=`ls .env-*` 2&> /dev/null
    if [[ "$SAMPLE_FILES" != "" ]]; then
        log "-> samples found: ask user to select one"

        # Build menu list file found files
        MENU_LIST=""
        for FILE in $SAMPLE_FILES; do
            MENU_LIST="$MENU_LIST $FILE $FILE ";
        done
        menu;

        # Use selected file as original
        log "-> user selected: $SELECTED_ITEM"
        DOTENV_FILE_ORIG=$SELECTED_ITEM
        cp $SELECTED_ITEM $DOTENV_FILE_TMP;
        SELECTED_ITEM=""

        echo "" >> $LOG_FILE;
        return 1;
    fi

    log "-> no .env files found: creating empty one";

    $DIALOG --title "Create new file" \
    --clear \
    --yesno "No .env file found! Do you want to create a new empty one?" 7 60

    # Get exit status
    # 0 means user hit [yes] button.
    # 1 means user hit [no] button.
    # 255 means user hit [Esc] key.
    response=$?
    case $response in
       0)
            touch $DOTENV_FILE_ORIG
            cp $DOTENV_FILE_ORIG $DOTENV_FILE_TMP;
            source $DOTENV_FILE_TMP
            echo "" >> $LOG_FILE;
            return 1
            ;;
       1|255)
            log "User didn't want to create an empty file => exiting."
            clear
            echo ""
            echo -e "${COLOR_RED}No .env file found!${COLOR_NONE}"
            echo ""
            exit;
            ;;
    esac

    # Re-source .env file
    source $DOTENV_FILE_TMP

    echo "" >> $LOG_FILE;
}


###
# Menu: Display a menu using dialog/whiptail with the provided options. The
# return value is the selected item.
###
function menu() {
    # MENU_LIST= $1
    TITLE_SELECTED=""
    EXIT_OR_GO_BACK="Exit"
    if [ "$SELECTED_ITEM" != "" ]; then
        TITLE_SELECTED=" - $FULL_SELECT"
        EXIT_OR_GO_BACK="Back"
    fi

    MENU_COMMAND="$DIALOG --cancel-button \"$EXIT_OR_GO_BACK\" --title \"Dotenv Editor $TITLE_SELECTED \" --menu \"Choose an option\" 20 80 12 $MENU_LIST 3>&1 1>&2 2>&3"
    SELECTED_ITEM=$(eval $MENU_COMMAND);
    EXIT_STATUS=$?
    [[ "$EXIT_STATUS" = 1 ]] && [[ "$EXIT_OR_GO_BACK" == "Exit" ]] && saveChangesOrExit;    # test if exit button is pressed
    [[ "$EXIT_STATUS" = 1 ]] && [[ "$EXIT_OR_GO_BACK" == "Back" ]] && decrementDepthLevel;  # test if back button is pressed
}


function decrementDepthLevel {
    DEPTH_LEVEL=`echo "$FULL_SELECT" | grep -o \_  | wc -l`
    if [[ $DEPTH_LEVEL -gt 1 ]]; then
        CURRENT=`echo "${FULL_SELECT}" | cut --delimiter='_' --fields=-$((DEPTH_LEVEL-1))`
        SELECTED_ITEM="${PREV_ITEM}"
        PREV_ITEM=$CURRENT
        CURRENT=""
        DEPTH_LEVEL=$((DEPTH_LEVEL-1))

    elif [[ $DEPTH_LEVEL -gt 0 ]]; then
        SELECTED_ITEM=`echo "${FULL_SELECT}" | cut --delimiter='_' --fields=-$DEPTH_LEVEL`
        CURRENT=""
        PREV_ITEM=""
        DEPTH_LEVEL=0

    else
        CURRENT=""
        SELECTED_ITEM=""
        PREV_ITEM=""
        DEPTH_LEVEL=0
    fi

    log "Back item pressed => decrementing depth level"
    log "- DEPTH_LEVEL: $DEPTH_LEVEL"
    log "- CURRENT: $CURRENT"
    log "- PREV: $PREV_ITEM"
    log "- SELECTED: $SELECTED_ITEM"
    echo "" >> $LOG_FILE
}


###
# Update value: Update a variable by using the dialog/whiptail textbox.
###
function updateVariable() {
    # Parameters
    KEY=$1
    OLD=${!KEY}

    # Extract comment from .env file
    CMD="grep -i -B 10 '${KEY}=' .env | tac | awk '{print} /^$/ {exit}' | grep '^#' | tac | sed 's/^#\ \(.*\)/\1/' | tr '\n' ' '" 
    COMMENT=$(eval $CMD)

    # Show dialog
    log "Showing dialog for updating variable: ${KEY}"
    NEW=$($DIALOG \
        --clear \
        --inputbox "${KEY}: ${COMMENT}" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)


    # Value is empty
    if [[ "$MODE_MODIFY" == "ON" && ( "$NEW" == "" || "$NEW" == "\"\"" ) ]]; then
        log "Empty $KEY: $OLD => Should delete?"

        $DIALOG --title "Delete variable" \
        --clear \
        --yesno "Are you sure you want to delete variable \"$KEY\"?" 7 60


        # Get exit status
        # 0 means user hit [yes] button.
        # 1 means user hit [no] button.
        # 255 means user hit [Esc] key.
        response=$?
        case $response in
           0)
                log "Delete variable: filter variable and overwrite file."
                CMD=`cat $DOTENV_FILE_TMP | grep -v "$KEY=" > /tmp/dotenv-editor.tmp && cp /tmp/dotenv-editor.tmp $DOTENV_FILE_TMP`

                source $DOTENV_FILE_TMP
                ;;
           1)
                log "Keep variable => Do nothing.";
                ;;
           255)
                log "[ESC] key pressed.";
                ;;
        esac

    # Value is different
    elif [ "$OLD" != "$NEW" ]; then
        log "Updating $KEY: $OLD => $NEW";

        # Check if value is an integer (no quotes)
        local VALUE_IS_INTEGER=false;
        if [ "$NEW" -eq "$NEW" ] 2>/dev/null; then
          VALUE_IS_INTEGER=true
        fi

        # When quotes are enabled
        if [[ "$COMPAT_QUOTE" == "ON" && VALUE_IS_INTEGER == true ]]; then
            sed -i "s/$KEY=.*/$KEY=\"$NEW\"/" $DOTENV_FILE_TMP

        # When there are spaces found in the value
        elif [[ $NEW = *\ * ]]; then
            sed -i "s/$KEY=.*/$KEY=\"$NEW\"/" $DOTENV_FILE_TMP

        # Otherwise do not quote values
        else
            sed -i "s/$KEY=.*/$KEY=$NEW/" $DOTENV_FILE_TMP
        fi

        # Resource the file to update the global variables
        source $DOTENV_FILE_TMP

    # Otherwise nothing happened.
    else
        log "No change $KEY: $OLD => $NEW";
    fi

    echo "" >> $LOG_FILE
}


function newVariable() {
    log "Showing dialog for creating a new variable";

    NAME=$($DIALOG \
        --clear \
        --title "New variable: NAME" \
        --inputbox "Enter the name of the variable" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)

    VALUE=$($DIALOG \
        --clear \
        --title "New variable: VALUE" \
        --inputbox "Enter the value of the variable" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)

    DESCRIPTION=$($DIALOG \
        --clear \
        --title "New variable: DESCRIPTION" \
        --inputbox "Enter a description for the variable" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)

    local FULL_NAME=""
    if [[ "$CURRENT" == "" ]]; then
        FULL_NAME="${NAME}"
    else
        FULL_NAME="${CURRENT}_${NAME}"
    fi
    echo "" >> $DOTENV_FILE_TMP
    echo "# $DESCRIPTION" >> $DOTENV_FILE_TMP
    echo "${FULL_NAME^^}=\"$VALUE\"" >> $DOTENV_FILE_TMP

    log "- Name: ${FULL_NAME}";
    log "- Value: ${VALUE}";
    log "- Description: ${DESCRIPTION}";

    echo "" >> $LOG_FILE
}



###
# View & modify settings. It shows a checkbox list with options. These options
# can also be enabled/disabled directly using the command options: --group,
# --checkbox, --quote, etc.
#
# @see: http://linuxcommand.org/lc3_adv_dialog.php
###
function viewSettings() {
    log "Showing dialog for modifying settings";

    # Duplicate file descriptor 1 on descriptor 3
    exec 3>&1
     
    # Generate the dialog box
    FEATURES=$($DIALOG --title "INPUT BOX" \
        --clear  \
        --checklist \
        "Modify settings according to your preferences" 20 78 6 \
        "MODE_GROUP" "Enable grouping variables by separator (_)" $MODE_GROUP \
        "MODE_MODIFY" "Delete or create new variables" $MODE_MODIFY \
        "MODE_CHECKBOX" "Enable/disable services (& sections)" $MODE_CHECKBOX \
        "COMPAT_QUOTE" "Quote variables with a '\"'" $COMPAT_QUOTE \
        2>&1 1>&3)

    # Get dialog's exit status
    return_value=$?

    # Close file descriptor 3
    exec 3>&-

    # Act on the exit status
    case $return_value in
        $DIALOG_OK)
            log "FEATURES: $FEATURES"

            # Reset all features to defaults
            MODE_GROUP="OFF"
            MODE_CHECKBOX="OFF"
            COMPAT_QUOTE="OFF"

            # Update features with selected op tions
            for FEATURE in $FEATURES; do
                log "FEATURE: $FEATURE"
                if [[ $FEATURE = *MODE_GROUP* ]]; then
                # if [[ "$FEATURE" == "-\>GROUP" ]]; then
                    log "ENABLING GROUPING!"
                    MODE_GROUP="ON"
                fi
                if [[ $FEATURE = *MODE_CHECKBOX* ]]; then
                    log "ENABLING CHECKBOX!"
                    MODE_CHECKBOX="ON"
                fi
                if [[ $FEATURE = *COMPAT_QUOTE* ]]; then
                    log "ENABLING QUOTE!"
                    COMPAT_QUOTE="ON"
                fi
            done;

            ;;

        $DIALOG_CANCEL)
            log "Cancel pressed."
            ;;

        $DIALOG_HELP)
            log "Help pressed."
            ;;

        $DIALOG_EXTRA)
            log "Extra button pressed."
            ;;

        $DIALOG_ITEM_HELP)
            log "Item-help button pressed."
            ;;

        $DIALOG_ESC)
            if test -n "$FEATURES" ; then
                log "ESC pressed."
            else
                log "ESC pressed."
            fi
            ;;
    esac
    echo "" >> $LOG_FILE
}

SERVICES_FILTER=""

function grepVariableListAndFilter() {
    log "Building services list (*_ENABLED)"
    SERVICES_LIST=""
    SERVICES_FILTER=""

    if [[ "${MODE_CHECKBOX}" == "OFF" ]]; then
        log "- Checkboxes disabled => no filtering"
        return;
    fi

    for SERVICE in `cat $DOTENV_FILE_TMP | grep '_ENABLED=' | rev | cut --delimiter='_' --fields=2- | rev`; do
        VARNAME="${SERVICE}_ENABLED"

        VALUE=${!VARNAME}
        # echo "${VARNAME}: $VALUE"

        if [[ $VALUE == "1" || $VALUE == 1 ]]; then
            SERVICES_LIST="$SERVICES_LIST ${SERVICE} ${SERVICE} ON "
        else
            SERVICES_LIST="$SERVICES_LIST ${SERVICE} ${SERVICE} OFF "
            if [[ $SERVICES_FILTER == "" ]]; then
                SERVICES_FILTER="${SERVICE}_"
            else
                SERVICES_FILTER="${SERVICES_FILTER}\|${SERVICE}_"
            fi
        fi;
    done;

    log "- SERVICES_FILTER: ${SERVICES_FILTER}"
    log "- SERVICES_LIST: ${SERVICES_LIST}"
    echo "" >> $LOG_FILE
}



function dialogEnableServices() {
    log "Showing dialog for enabling/disabling services"

    # Duplicate file descriptor 1 on descriptor 3
    exec 3>&1
     
    grepVariableListAndFilter

    # Generate the dialog box
    SERVICES=$($DIALOG --title "INPUT BOX" \
        --clear  \
        --checklist \
        "Enable/disable services" 20 78 10 \
        $SERVICES_LIST \
        2>&1 1>&3)

    # Get dialog's exit status
    return_value=$?

    # Close file descriptor 3
    exec 3>&-

    # Act on the exit status
    case $return_value in
        $DIALOG_OK)
            log "SERVICES: $SERVICES"

            # Disable all services
            for SERVICE in `cat $DOTENV_FILE_TMP | grep '_ENABLED=' | rev | cut --delimiter='_' --fields=2- | rev`; do
                sed -i "s/${SERVICE}_ENABLED=.*/${SERVICE}_ENABLED=0/" $DOTENV_FILE_TMP
                log "DISABLING: ${SERVICE}"
            done
            # Enable selected services
            for SERVICE in $SERVICES; do
                sed -i "s/${SERVICE}_ENABLED=.*/${SERVICE}_ENABLED=1/" $DOTENV_FILE_TMP
                log "ENABLING: ${SERVICE}"
            done;

            # Source .env file and rebuild services list and filter.
            source $DOTENV_FILE_TMP
            grepVariableListAndFilter
            ;;

        $DIALOG_CANCEL)
            log "Cancel pressed."
            ;;

        $DIALOG_HELP)
            log "Help pressed."
            ;;

        $DIALOG_EXTRA)
            log "Extra button pressed."
            ;;

        $DIALOG_ITEM_HELP)
            log "Item-help button pressed."
            ;;

        $DIALOG_ESC)
            if test -n "$FEATURES" ; then
                log "ESC pressed."
            else
                log "ESC pressed."
            fi
            ;;
    esac
    echo "" >> $LOG_FILE
}


function saveChangesOrExit() {
    log "Save changes or exit"

    # Check if tmp file differs from orig file.
    diffTmpVsOrigFile;
    if [ -s $DOTENV_FILE_TMP.diff ]; then
        log "- Showing dialog asking to save changes"

        $DIALOG --title "Dotenv Editor - Save Changes?" \
            --yesno "Are you sure you want to save the changes to \"$DOTENV_FILE_ORIG\"?" 7 60

        # Get exit status
        # 0 means user hit [yes] button.
        # 1 means user hit [no] button.
        # 255 means user hit [Esc] key.
        response=$?
        case $response in
           0)
                log "-> Overwriting original file with changes."
                cp $DOTENV_FILE_TMP $DOTENV_FILE_ORIG
                ;;
           1)
                log "-> Changes discarded."

                ;;
           255)
                log "-> [ESC] key pressed. "
                ;;
        esac
    fi

    # Cleann up any other tmp files
    rm /tmp/dotenv-editor-*
    echo "" >> $LOG_FILE

    # Exit application
    log "Exiting dotenv-editor"
    echo "" >> $LOG_FILE
    clear;
    exit;
}


###
# Store differences between ORIG and TMP file in a DIFF file.
###
function diffTmpVsOrigFile () {
    diff --unified --color $DOTENV_FILE_ORIG $DOTENV_FILE_TMP > $DOTENV_FILE_TMP.diff
}


###
# Main: show the main menu of (grouped) topics based on the select prefix. The
# main program keeps running until the user has selected a topic or exited the
# application.
###
function mainLoop() {

    # menu
    # echo "SELECTED: $SELECTED_ITEM"

    case $SELECTED_ITEM in
        Exit) #Exit the dotenv editor application
            # clear;
            saveChangesOrExit
            ;;

        *SAVE) # Save the   
            # clear;
            log "Saving tmp file to orig file"
            cp $DOTENV_FILE_TMP $DOTENV_FILE_ORIG
            source $DOTENV_FILE_ORIG
            decrementDepthLevel
            ;;

        *SERVICES)
            dialogEnableServices
            decrementDepthLevel
            ;;


        *VIEW_DIFF) # Review changes made
            # clear;
            diffTmpVsOrigFile
            BLA=$(dialog --scrollbar --textbox $DOTENV_FILE_TMP.diff 30 80 3>&1 1>&2 2>&3)
            rm "$DOTENV_FILE_TMP.diff"
            decrementDepthLevel
            ;;

        *RESET) # Reset changes
            cp $DOTENV_FILE_ORIG $DOTENV_FILE_TMP
            source $DOTENV_FILE_TMP
            decrementDepthLevel
            ;;

        *NEW) # Reset changes
            newVariable
            decrementDepthLevel
            ;;


        *SETTINGS) # Edit settings
            viewSettings
            decrementDepthLevel
            ;;


        *)
            buildMenuSelection
            ;;
    esac
    mainLoop
}


###
# Build Menu Selection: TL;DR: Build a string of options to display.
# This is probably the most difficult function in this script (meaning it can
# be improved in many ways). However it does the trick for now and I would like
# to see pull requests regarding this function.
#
# @TODO: It uses global variables; shouldn't I pass them  as an argument?
###
function buildMenuSelection {
    log "Menu item selection"
    log "-> CURRENT:  $CURRENT"
    log "-> SELECTED: $SELECTED_ITEM"
    log "-> PREV: $PREV_ITEM"
    PREV_ITEM=$CURRENT
    # echo "-> PREV: $PREV_ITEM" >> $LOG_FILE

    # Determine full name of a selected item. (as the menu only shows the last part)
    local FULL_SELECT="${SELECTED_ITEM}"
    if [[ "$CURRENT" != "" ]]; then
        FULL_SELECT="${CURRENT}_${SELECTED_ITEM}"
    fi

    # Check if a single option has been chosen
    CNT_MATCHES=`cat $DOTENV_FILE_TMP | grep "$FULL_SELECT=" | wc -l`
    CNT_GROUPS=`cat $DOTENV_FILE_TMP | grep $FULL_SELECT"_" | wc -l`
    if [ $CNT_MATCHES == 1 ]; then
        updateVariable $FULL_SELECT

        # Decrement depth level.
        SELECTED_ITEM=`echo "${CURRENT}_${SELECTED_ITEM}" | cut --delimiter='_' --fields=-$DEPTH_LEVEL`
        CURRENT=""
        FULL_SELECT="${SELECTED_ITEM}"
        if [[ "$CURRENT" != "" ]]; then
            FULL_SELECT="${CURRENT}_${SELECTED_ITEM}"
        fi
    fi

    CURRENT=$FULL_SELECT
    # CURRENT=$SELECTED_ITEM
    MENU_LIST_GROUPS=""
    MENU_LIST_ITEMS=""
    MENU_LIST_MORE=""
    MENU_LIST=""
    VARIABLE_GROUP=""

    DEPTH_LEVEL=`echo "$CURRENT" | grep -o \_  | wc -l`

    if [ "$CURRENT" != "" ]; then
        ((DEPTH_LEVEL=DEPTH_LEVEL+1))
    fi

    echo "" >> $LOG_FILE;
    if [[ "$MODE_GROUP" == "ON" ]]; then
        log "-> GROUP MODE ENABLED"
        log "-> SELECT: $FULL_SELECT"
        log "-> DEPTH: $DEPTH_LEVEL"
        log "-> MAX: $GROUP_MAX_DEPTH"

        FIELD_DEPTH=$((DEPTH_LEVEL+1))
        # FIELD_DEPTH=$((DEPTH_LEVEL))
        # FIELD_DEPTH=1
        log "-> FIELD: $FIELD_DEPTH"

        if [[ $DEPTH_LEVEL -ge $GROUP_MAX_DEPTH ]]; then
            log "=> Max reached"
            VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP | grep -v '^#' | grep -v '^$' | grep -v '^ '| grep '^'$CURRENT | cut --delimiter='_' --fields=$FIELD_DEPTH- | sort | uniq`
            CMD="awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep -v '^ '| grep '^'$CURRENT | cut --delimiter='_' --fields=$FIELD_DEPTH | sort | uniq"

        elif [[ $DEPTH_LEVEL -gt 0 ]]; then
            log "=> Sub item"
            FIELD_DEPTH=`echo "$FULL_SELECT" | grep -o \_  | wc -l`
            ((FIELD_DEPTH=FIELD_DEPTH+2))
            log "-> NEW DEPTH: $FIELD_DEPTH"
            VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep -v '^ '| grep "\${FULL_SELECT}" | cut --delimiter='_' --fields=$FIELD_DEPTH | sort | uniq`
            # VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep '^$FULL_SELECT' | cut --delimiter='_' --fields=$FIELD_DEPTH | sort | uniq`
            CMD="awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep -v '^ '| grep '^${FULL_SELECT}' | cut --delimiter='_' --fields=$FIELD_DEPTH | sort | uniq"

        else 
            log "=> Nothing selected"
            if [[ "$SERVICES_FILTER" != "" ]]; then
                VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP | grep -v ${SERVICES_FILTER} | grep -v '^#' | grep -v '^$' | grep -v '^ '| cut --delimiter='_' --fields=1 | sort | uniq`
            else
                VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP | grep -v '^#' | grep -v '^$' | grep -v '^ '| cut --delimiter='_' --fields=1 | sort | uniq`
            fi
            CMD="awk -F= '{print $1 }' $DOTENV_FILE_TMP | grep -v '${SERVICES_FILTER}' | grep -v '^#' | grep -v '^$' | grep -v '^ '| cut --delimiter='_' --fields=1 | sort | uniq"
        fi

    else
        log "=> Simple mode"
        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep -v '^ '| sort | uniq`
        CMD="awk -F= '{print $1 }' $DOTENV_FILE_TMP  | grep -v '^#' | grep -v '^$' | grep -v '^ '| sort | uniq"
    fi;

    log "- CMD: $CMD"
    log "- VAR_GROUP: $VARIABLE_GROUP"
    echo "" >> $LOG_FILE;

    COUNTER=0
    PROGRESS_MAX=`echo "$VARIABLE_GROUP" | wc -l`
    log "-> CNT_MATCHES: $CNT_MATCHES"
    log "-> CNT_ITEMS: $CNT_ITEMS"
    log "-> CNT_GROUPS: $CNT_GROUPS"
    log "-> PROGRESS_MAX: $PROGRESS_MAX"

    # Loop over the matched variables (in case of grouping).
    log "Listing menu items"
    for i in $VARIABLE_GROUP; do
        ((COUNTER++))

        # Calculate and display progress percentage.
        PERCENTAGE=$(( (100 * COUNTER/PROGRESS_MAX) + 50 / 100 ))
        echo $PERCENTAGE | $DIALOG --gauge "Processing variable: $i" 12 70
        log "${COUNTER} / ${PROGRESS_MAX} => ${PERCENTAGE} %";

        if [[ "$MODE_GROUP" == "ON" ]]; then

            local NUMBER_OF_UNDERSCORES=`echo "$i" | grep -o \_  | wc -l`
            log "- $i => $NUMBER_OF_UNDERSCORES";

            local MENU_KEY=""
            if [[ $NUMBER_OF_UNDERSCORES -gt $GROUP_MAX_DEPTH ]]; then
                MENU_KEY=`echo $i | awk -F"_" '{print substr($0, index($0, "_"))}'`
            else
                MENU_KEY=`echo $i | awk -F"_" '{print $2}'`
            fi                        

            # CMD_TMP="cat $DOTENV_FILE_TMP | grep "$i=" | wc -l";
            local FULL_NAME=""
            if [[ "$CURRENT" == "" ]]; then
                FULL_NAME="${i}"
            else
                FULL_NAME="${CURRENT}_${i}"
            fi

            CNT_ITEMS=`cat $DOTENV_FILE_TMP | grep "$FULL_NAME=" | wc -l`
            if [[ "${MODE_CHECKBOX}" == "ON" && "$i" == "ENABLED" ]]; then
                # Ignore _ENABLED item
                log "Ignoring _ENABLED items when MODE_CHECKBOX is ON";

            elif [ "$CNT_ITEMS" == "1" ]; then
                VALUE=${!FULL_NAME}
                MENU_LIST_ITEMS="$MENU_LIST_ITEMS $i \"$VALUE\" "
            else
                # Try to extract a description for the group. Otherwise use 'More options'
                VAR_LENGTH=`echo -n "$i" | wc -c`
                MORE_CMD="cat $DOTENV_FILE_TMP | grep -v '^ '| grep \"^# $i:\" | cut -c 4- | cut -c $VAR_LENGTH- | rev | cut 2- | rev"
                MORE_TEXT=`cat $DOTENV_FILE_TMP | grep -v '^ '| grep "^# $i:" | rev  | cut -c 2- | rev`
                MORE_TEXT="${MORE_TEXT:2}"
                MORE_TEXT="${MORE_TEXT:$VAR_LENGTH}"
                MORE_TEXT="${MORE_TEXT:2}"
                MORE_TEXT="${MORE_TEXT:-2}"
                if [[ "${MORE_TEXT}" == "2" ]]; then
                    MORE_TEXT="More options";
                fi
                MENU_LIST_MORE="$MENU_LIST_MORE $i =\>\ \"$MORE_TEXT\" "
            fi

        else
            # Default mode: list all variables
            VALUE=${!i}
            MENU_LIST_ITEMS="$MENU_LIST_ITEMS $i \"$VALUE\" "
        fi
    done

    # Build menu list out of MORE (sub items) and ITEMS (modify).
    if [[ "${MODE_CHECKBOX}" == "ON" ]]; then
        MENU_LIST="$MENU_LIST *SERVICES \"Enable/disable services\" "
        MENU_LIST="$MENU_LIST \" \" \"\" "
    fi

    if [[ "$MENU_LIST_MORE" != "" ]]; then
        MENU_LIST="$MENU_LIST $MENU_LIST_MORE "
    fi
    MENU_LIST="$MENU_LIST $MENU_LIST_ITEMS "

    # Main menu (after separator)
    MENU_LIST="$MENU_LIST \" \" \"\" "
    if [[ `diff --color $DOTENV_FILE_ORIG $DOTENV_FILE_TMP` ]]; then
        # Optional options in case the .env file has been modified.
        MENU_LIST="$MENU_LIST *VIEW_DIFF \"View differences\" "
        MENU_LIST="$MENU_LIST *SAVE \"Save changes\" "
        MENU_LIST="$MENU_LIST *RESET \"Reset changes\" "
    fi
    if [[ "$MODE_MODIFY" == "ON" ]]; then
        MENU_LIST="$MENU_LIST *NEW \"Add a new variable\" "
    fi
    MENU_LIST="$MENU_LIST *SETTINGS \"View current options and/or preferences\" "

    echo "" >> $LOG_FILE

    # Display menu
    menu

    echo "" >> $LOG_FILE
}


###
# Display the help for this command.
###
function showHelp {
    echo "Usage: dotenv-editor [FILE]"
    echo ""
    echo "Command options:"
    echo "  -f, --file=FILE            use this dotenv configuration file (default: .env)"
    echo "  -l, --log=FILE             use this file for (debug) logging (default: /dev/null)"
    echo "  -v, --version              print program version"
    echo "  -h, --help                 print help info (this screen)"
    echo ""
    echo "Compatibility modes:"
    echo -e "  -q, --quote                quote variables with a '\"'"
    # echo -e "  -k, --keep-comments        keep comments"
    echo ""
    echo "UI features:"
    echo "  -g, --group                enable grouping variables by separator"
    echo "  -c, --checkbox             enable/disable services checkboxes for variables called"
    echo "                             *_ENABLED* and have a 0 or 1 value"
    echo "  -m, --modify               enable deleting and/or creating new variables."
    echo ""
    # echo "Group mode options:"
    # echo "  -d, --depth=2              stops grouping variables after this depth"
    # echo "  -s, --seperator=_          use a different separator (default: '_')"
    # echo ""
    # echo "Checkbox mode options:"
    # echo "  -c, --checkbox             enable checkboxes for variables called *ENABLED* or"
    # echo "                             have a 0 or 1 value."
    # echo "  -e, --enabled              show checkbox for ENABLE_ variables (set --checkbox to 1)"
    # echo ""
    echo "Specify UI library:"

#if [[ " ${UI_LIBS_AVAILABLE} " =~ " dialog " ]]; then
    echo "  --dialog                   Use the original dialog library"
#fi    
    echo "  --whiptail                 Use the newer whiptail library"
    # echo "  --kdialog                  Use the graphical library for KDE"
    # echo "  --gdialog                  Use the graphical library for Gnome"
    echo ""
}


###
# Display the version of this command.
###
function showVersion {
    echo "dotenv-edit $VERSION"
}


###
# Main application
###

# read the options
TEMP=`getopt -n "$0" -o "f::l::h::v::q::g::d::c::m::" --long "file:,log:,help::,version::,group::,depth:,checkbox::,,quote::,modify::,dialog::,whiptail::" -- "$@"`
eval set -- "$TEMP"

# Set defaults in case optional parameters have not been set.
if [ -z "${DOTENV_FILE_ORIG}" ]; then 
    DOTENV_FILE_ORIG=.env
fi
if [ -z "${LOG_FILE}" ]; then 
    LOG_FILE=/dev/null
fi

# Read preferences from ~/.dotenv-editor file
readPreferences;


# FROM https://www.tutorialspoint.com/unix_commands/getopt.htm
# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -f|--file)
            DOTENV_FILE_ORIG=${2#=}
            log "- receiving option --file: $DOTENV_FILE_ORIG"
            shift 2 ;;

        -l|--log)
            LOG_FILE=${2#=}
            log "Starting dotenv-editor"
            log "- receiving option --log: $LOG_FILE"
            shift 2 ;;

        -h|--help)
            showHelp;
            exit
            ;;

        -v|--version)
            showVersion;
            exit;
            ;;

        # UI modes
        -g|--group)
            log "- enabling ui mode --group"
            MODE_GROUP="ON"
            shift 2 ;;

        # UI modes
        -m|--modify)
            log "- enabling ui mode --modify"
            MODE_MODIFY="ON"
            shift 2 ;;

        -d|--depth)
            log "- setting group depth to "
            GROUP_MAX_DEPTH=${2#=}
            MODE_GROUP="ON"
            shift 2 ;;

        -c|--checkbox)
            log "- enabling ui mode --checkbox"
            MODE_CHECKBOX="ON"
            shift 2 ;;

        # Compatibility modes
        -q|--quote)
            log "- enabling compat mode --quote"
            COMPAT_QUOTE="ON"
            shift 2 ;;

        --dialog)
            TEST_UI_LIBS="dialog $TEST_UI_LIBS"
            log "- selected UI lib: dialog"
            DIALOG="dialog"
            shift 2 ;;

        --whiptail)
            TEST_UI_LIBS="whiptail $TEST_UI_LIBS"
            log "- selected UI lib: whiptail"
            DIALOG="whiptail"
            shift 2 ;;

        --) shift ; break ;;
        *)
            log "Internal error!"
            exit 1 ;;
    esac
done

# Check dependencies
checkDependencies;

# Select .env file (or copy from a sample file)
determineDotEnvFile

# Build services list and filter
grepVariableListAndFilter

# Run the main program.
mainLoop
