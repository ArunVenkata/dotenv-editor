#!/bin/bash


###
# Global Config
###
DIALOG=${DIALOG=whiptail}
MENU_LIST=""
MENU_OPTIONS=""
DOTENV_FILE=".env"
SELECTED_ITEM=""
CURRENT=""

###
# Welcome: display a nice and warm welcome message.
###
function welcomeMessage() {
    $($DIALOG \
        --clear \
        --title "Dotenv Editor - Welcome" \
        --clear \
        --msgbox "$APP_TITLE\n\nThis setup will guide you through configuring all the existing variables.\n\nTheir defaults are already prefilled, so hit ENTER to go the next one." \
        20 80 \
        3>&1 1>&2 2>&3)

}



### 
# Determine if .env file exists or create a new file by copying one of the 
# .env-* files as a starting point.
###
function determineDotEnvFile() {
    echo "Check of existing .env file: $DOTENV_FILE\n";
    if [ -f $DOTENV_FILE ]; then
        echo "-> file exists: $DOTENV_FILE\n";
        source .env
        return $DOTENV_FILE;
    fi

    # Detect .env-* files
    SAMPLE_FILES=`ls .env-*`
    MENU_LIST=""
    for FILE in $SAMPLE_FILES; do
        # echo "$FILE"
        # PREFIX=`echo $i | awk -F"_" '{print $1}'`
        # REST=`echo $i | awk -F"_" '{print $2}'`   
        MENU_LIST="$MENU_LIST $FILE $FILE ";
    done
    menu;

    DOTENV_FILE=$SELECTED_ITEM
    SELECTED_ITEM=""

    source $DOTENV_FILE
}




function detectFullKeyOrCategory () {
    # CURRENT=$1
    # echo "CURRENT: $CURRENT";

    # Check if a single option has been chosen
    CNT_MATCHES=`cat $DOTENV_FILE | grep "$CURRENT=" | wc -l`
    if [ $CNT_MATCHES == 1 ]; then
        # echo "EXACT MATCT: $CURRENT"
        $CURRENT;
        return;
    fi

    PREFIX=$CURRENT"_"
    # echo "PREFIX: $PREFIX"
    CNT_MATCHES=`cat $DOTENV_FILE | grep "$PREFIX" | wc -l`
    # echo "MATCHES: $CNT_MATCHES"

    if [ "$CURRENT" == "" ]; then
        OPTIONS=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1}' | sort | uniq`
    else
        OPTIONS=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep "^$CURRENT" | grep -v '^$'`
        # @todo: strip off current part
    fi

    VARIABLE_LIST=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$'`
    VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1}' | sort | uniq`

    MENU_LIST=""

    for i in $VARIABLE_GROUP; do
        PREFIX=`echo $i | awk -F"_" '{print $1}'`
        REST=`echo $i | awk -F"_" '{print $2}'`
   
        MENU_LIST="$MENU_LIST $PREFIX >more "
        # MENU_LIST="$MENU_LIST $i \"$VALUE\" "
        # echo "- $i => $VALUE"
    done

    for i in $VARIABLE_LIST; do
        PREFIX=`echo $i | awk -F"_" '{print $1}'`
        REST=`echo $i | awk -F"_" '{print $2}'`
    
        VALUE=`./bin/dotenv.sh get $i | sed -e 's/^"//' -e 's/"$//'`
        # VALUE=`./bin/dotenv.sh get $i `
        MENU_LIST="$MENU_LIST $i \"$VALUE\" "
        # echo "- $i => $VALUE"
    done

    # echo $MENU_LIST;
    # return $MENU_LIST
}


###
# Update value: Update a variable by using the dialog/whiptail textbox.
###
function updateVariable() {
    # Parameters
    KEY=$1

    OLD=${!KEY}

    # echo "ASKING INPUT FOR KEY: $KEY ($OLD)"
    # Show dialog
    # OLD=`./bin/dotenv.sh get $KEY`
    # OLD=`./bin/dotenv.sh get $KEY | sed -e 's/^"//' -e 's/"$//'`
    NEW=$($DIALOG \
        --clear \
        --inputbox "$KEY" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)
        # --title "Configuration - $KEY" \

    if [ "$OLD" != "$NEW" ]; then
        echo "Updating $KEY: $OLD => $NEW"

        # echo "Replacing key: $VAR => $VALUE"
        sed -i "s/$KEY=.*/$KEY=\"$NEW\"/" $DOTENV_FILE

        # Resource the file to update the global variables
        source $DOTENV_FILE

    else
        echo "No change $KEY: $OLD => $NEW"
    fi
}


###
# Menu: Display a menu using dialog/whiptail with the provided options. The
# return value is the selected item.
###
function menu() {
    # MENU_LIST= $1
    TITLE_SELECTED=""
    EXIT_OR_GO_BACK="Exit"
    if [ "$SELECTED_ITEM" != "" ]; then
        TITLE_SELECTED=" - $SELECTED_ITEM"
        EXIT_OR_GO_BACK="Back"
    fi



    SELECTED_ITEM=$($DIALOG \
        --cancel-button "$EXIT_OR_GO_BACK" \
        --title "Dotenv Editor $TITLE_SELECTED " \
        --menu "Choose an option" \
        20 80 12 \
        $MENU_LIST \
        3>&1 1>&2 2>&3)
    EXIT_STATUS=$?
    [[ "$EXIT_STATUS" = 1 ]] && [[ "$EXIT_OR_GO_BACK" == "Exit" ]] && clear && exit;    #test if exit button is pressed

    # return '$SELECTED_ITEM';
}


###
# Main: show the main menu of (grouped) topics based on the select prefix. The
# main program keeps running until the user has selected a topic or exited the
# application.
###
function main() {
    # echo "DETECTING: $CURRENT"
    # detectFullKeyOrCategory $CURRENT

    # menu
    # echo "SELECTED: $SELECTED_ITEM"

    case $SELECTED_ITEM in
        Exit) #Exit the dotenv editor application
            # echo "1 => Aap"
            # clear;
            echo $MENU_LIST
            clear;
            exit;
            ;;

        # $CURRENT)
        #     echo "CURRENT!! WHOOAAAAHHH"
        #     ;;

        # Back)
        #     echo "RESETTING CURRENT"
        #     CURRENT=""
        #     # menu
        #     ;;

        *)
            if [ "$SELECTED_ITEM" == "Back" ]; then
                # CURRENT="";
                SELECTED_ITEM="";
            fi

    
            # Check if a single option has been chosen
            CNT_MATCHES=`cat $DOTENV_FILE | grep "$SELECTED_ITEM=" | wc -l`
            CNT_GROUPS=`cat $DOTENV_FILE | grep $SELECTED_ITEM"_" | wc -l`
            # echo "GROUPS: $CNT_GROUPS"
            # echo "CURRENT: $SELECTED_ITEM => $CNT_MATCHES"
            if [ $CNT_MATCHES == 1 ]; then
                echo "MATCH: $SELECTED_ITEM => ${!SELECTED_ITEM}"
                updateVariable $SELECTED_ITEM
                SELECTED_ITEM=""
                CURRENT=""

            else
                # echo $SELECTED_ITEM
                CURRENT=$SELECTED_ITEM
                MENU_LIST=""
                VARIABLE_GROUP=""

                # echo "CURRENT: $CURRENT"
                # COUNT_UNDERSCORES=`echo $CURRENT | sed -e 's/\(.\)/\n/g' | grep '_' | wc -l`;
                # DEPTH_LEVEL=0;
                # if [ $COUNT_UNDERSCORES > 0 ]; then
                # fi
                DEPTH_LEVEL=`echo "$CURRENT" | grep -o \_  | wc -l`
                if [ "$CURRENT" != "" ]; then
                    ((DEPTH_LEVEL=DEPTH_LEVEL+1))
                fi

                # echo "DEPTH: $DEPTH_LEVEL"
                if [ "$CURRENT" == "" ]; then
                    VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1}' | sort | uniq`
                    if [ $DEPTH_LEVEL == 1 ]; then
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1 " " $2}' | sort | uniq`
                    fi
                    if [ $DEPTH_LEVEL == 2 ]; then
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1 " " $2 " " $3}' | sort | uniq`
                    fi
                else 
                    VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep "^"$CURRENT"_" | grep -v '^$' | awk -F"_" '{print $1 "_" $2}' | sort | uniq`
                    # echo "GRGOUP: $VARIABLE_GROUP"
                fi
                for i in $VARIABLE_GROUP; do
                    # @todo: fix this copy@paste stuff
                    if [ $DEPTH_LEVEL == 0 ]; then
                        PREFIX=`echo $i | awk -F"_" '{print $1}'`
                        # PREFIX=$CURRENT"_"$PREFIX 
                        REST=`echo $i | awk -F"_" '{print $2}'`
                    fi
                    if [ $DEPTH_LEVEL == 1 ]; then
                        PREFIX=`echo $i | awk -F"_" '{print $1 "_" $2}'`
                        REST=`echo $i | awk -F"_" '{print $3}'`
                        # MENU_LIST="$MENU_LIST $PREFIX More "
                    fi
#                    if [ $DEPTH_LEVEL == 2 ]; then
#                        PREFIX=`echo $i | awk -F"_" '{print $1 "_" $2 "_" $3}'`
#                        REST=`echo $i | awk -F"_" '{print $4}'`
##                        # MENU_LIST="$MENU_LIST $PREFIX More "
#                    fi
                    if [ $DEPTH_LEVEL == 3 ]; then
                        PREFIX=`echo $i | awk -F"_" '{print $1 "_" $2 "_" $3 "_" $4}'`
                        REST=`echo $i | awk -F"_" '{print $5}'`
                        # MENU_LIST="$MENU_LIST $PREFIX More "
                    fi

                    CNT_ITEMS=`cat $DOTENV_FILE | grep "$i=" | wc -l`
                    echo "ITEMS: $CNT_ITEMS"
                    if [ $CNT_ITEMS > 1 ]; then
                        MENU_LIST="$MENU_LIST $PREFIX More "
                    else
                        VALUE=`./bin/dotenv.sh get $i | sed -e 's/^"//' -e 's/"$//'`
                        MENU_LIST="$MENU_LIST $PREFIX $VALUE "
                    fi
              
                    # MENU_LIST="$MENU_LIST $i \"$VALUE\" "
                    # echo "- $i => $VALUE"
                done
                # if [ $DEPTH_LEVEL == 0 ]; then
                #     if [ "$CURRENT" == "" ]; then
                #         # MENU_LIST="$MENU_LIST \"\" Back "
                #         MENU_LIST="$MENU_LIST Back Back "
                #     else
                #         MENU_LIST="$MENU_LIST Back Back "
                #     fi
                # fi
                # MENU_LIST="$MENU_LIST \"\" "
                # MENU_LIST="$MENU_LIST Back Back "

                # exit;
                menu
                # detectFullKeyOrCategory $SELECTED_ITEM
            fi

            ;;
    esac
    main
}




# Display welcome message
welcomeMessage

# Select .env file (or copy from a sample file)
determineDotEnvFile

# Run the main program.
main
