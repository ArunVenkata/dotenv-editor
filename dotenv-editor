#!/bin/bash


###
# Global Config
###
DIALOG=""
MENU_LIST=""
MENU_OPTIONS=""
DOTENV_FILE=".env"
SELECTED_ITEM=""
CURRENT=""

VERBOSE=0
VERSION="0.2.1"

COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_ORANGE='\033[0;33m'
COLOR_NONE='\033[0m' # No Color


###
# Check if all required dependencies have been installed. 
###
function checkDependencies() {
    ERROR=""

    DEPENDENCIES="sed awk sort uniq grep"
    echo "Checking if required dependencies are available" > $LOG_FILE
    for COMMAND in $DEPENDENCIES; do
        if ! [ -x "$(command -v $COMMAND)" ]; then
            echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $COMMAND is not installed!" >&2
            ERROR="$COMMAND is not installed!"
        else
            echo -e " ${COLOR_GREEN}OK${COLOR_NONE}  : $COMMAND is available." >&2
        fi
    done
    echo ""

    UI_LIBRARIES="whiptail dialog"
    echo "Checking if one of the UI libraries is available"
    DIALOG=""
    for UI_LIB in $UI_LIBRARIES; do
        if ! [ -x "$(command -v $UI_LIB)" ]; then
            echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $UI_LIB is not installed!" >&2
            ERROR="$UI_LIB is not available!"
        else
            if [ "$UI_SELECTED" == "" ]; then
                echo -e " ${COLOR_GREEN}OK${COLOR_NONE}  : $UI_LIB is selected." >&2
                DIALOG=$UI_LIB
            else
                echo -e " ${COLOR_ORANGE}OK${COLOR_NONE}  : $UI_LIB is available." >&2
            fi
        fi
    done
    echo ""

    if [ "$ERROR" != "" ]; then
        echo -e " ${COLOR_RED}ERR${COLOR_NONE} : $ERROR" >&2
        exit 1;
    fi

    echo "All required dependencies are available!"
    echo "Using the UI library: $UI_SELECTED"
    echo ""

}


###
# Welcome: display a nice and warm welcome message.
###
function welcomeMessage() {
    $($DIALOG \
        --clear \
        --title "Dotenv Editor - Welcome" \
        --clear \
        --msgbox "$APP_TITLE\n\nThis setup will guide you through configuring all the existing variables.\n\nTheir defaults are already prefilled, so hit ENTER to go the next one." \
        20 80 \
        3>&1 1>&2 2>&3)

}



### 
# Determine if .env file exists or create a new file by copying one of the 
# .env-* files as a starting point.
###
function determineDotEnvFile() {
    echo "Check of existing .env file: $DOTENV_FILE\n" > $LOG_FILE;
    if [ -f $DOTENV_FILE ]; then
        echo "-> file exists: $DOTENV_FILE\n" > $LOG_FILE;
        source .env
        return $DOTENV_FILE;
    fi

    # Detect .env-* files
    SAMPLE_FILES=`ls .env-*`
    MENU_LIST=""
    for FILE in $SAMPLE_FILES; do
        # echo "$FILE"
        # PREFIX=`echo $i | awk -F"_" '{print $1}'`
        # REST=`echo $i | awk -F"_" '{print $2}'`   
        MENU_LIST="$MENU_LIST $FILE $FILE ";
    done
    menu;

    DOTENV_FILE=$SELECTED_ITEM
    SELECTED_ITEM=""

    source $DOTENV_FILE
}






###
# Update value: Update a variable by using the dialog/whiptail textbox.
###
function updateVariable() {
    # Parameters
    KEY=$1

    OLD=${!KEY}

    # echo "ASKING INPUT FOR KEY: $KEY ($OLD)"
    # Show dialog
    NEW=$($DIALOG \
        --clear \
        --inputbox "$KEY" \
        8 80 "$OLD" \
        3>&1 1>&2 2>&3)
        # --title "Configuration - $KEY" \

    if [ "$OLD" != "$NEW" ]; then
        echo "Updating $KEY: $OLD => $NEW" > $LOG_FILE;

        # echo "Replacing key: $VAR => $VALUE"
        sed -i "s/$KEY=.*/$KEY=\"$NEW\"/" $DOTENV_FILE

        # Resource the file to update the global variables
        source $DOTENV_FILE

    else
        echo "No change $KEY: $OLD => $NEW" > $LOG_FILE;
    fi
}


###
# Menu: Display a menu using dialog/whiptail with the provided options. The
# return value is the selected item.
###
function menu() {
    # MENU_LIST= $1
    TITLE_SELECTED=""
    EXIT_OR_GO_BACK="Exit"
    if [ "$SELECTED_ITEM" != "" ]; then
        TITLE_SELECTED=" - $SELECTED_ITEM"
        EXIT_OR_GO_BACK="Back"
    fi



    SELECTED_ITEM=$($DIALOG \
        --cancel-button "$EXIT_OR_GO_BACK" \
        --title "Dotenv Editor $TITLE_SELECTED " \
        --menu "Choose an option" \
        20 80 12 \
        $MENU_LIST \
        3>&1 1>&2 2>&3)
    EXIT_STATUS=$?
    [[ "$EXIT_STATUS" = 1 ]] && [[ "$EXIT_OR_GO_BACK" == "Exit" ]] && clear && exit;    #test if exit button is pressed

    # return '$SELECTED_ITEM';
}


###
# Main: show the main menu of (grouped) topics based on the select prefix. The
# main program keeps running until the user has selected a topic or exited the
# application.
###
function mainLoop() {

    # menu
    # echo "SELECTED: $SELECTED_ITEM"

    case $SELECTED_ITEM in
        Exit) #Exit the dotenv editor application
            # echo "1 => Aap"
            # clear;
            clear;
            exit;
            ;;

        # $CURRENT)
        #     echo "CURRENT!! WHOOAAAAHHH"
        #     ;;

        # Back)
        #     echo "RESETTING CURRENT"
        #     CURRENT=""
        #     # menu
        #     ;;

        *)
            if [ "$SELECTED_ITEM" == "Back" ]; then
                # CURRENT="";
                SELECTED_ITEM="";
            fi

    
            # Check if a single option has been chosen
            CNT_MATCHES=`cat $DOTENV_FILE | grep "$SELECTED_ITEM=" | wc -l`
            CNT_GROUPS=`cat $DOTENV_FILE | grep $SELECTED_ITEM"_" | wc -l`
            # echo "GROUPS: $CNT_GROUPS"
            # echo "CURRENT: $SELECTED_ITEM => $CNT_MATCHES"
            if [ $CNT_MATCHES == 1 ]; then
                echo "MATCH: $SELECTED_ITEM => ${!SELECTED_ITEM}" > $LOG_FILE;
                updateVariable $SELECTED_ITEM
                SELECTED_ITEM=""
                CURRENT=""

            else
                # echo $SELECTED_ITEM
                CURRENT=$SELECTED_ITEM
                MENU_LIST=""
                VARIABLE_GROUP=""

                # echo "CURRENT: $CURRENT"
                # COUNT_UNDERSCORES=`echo $CURRENT | sed -e 's/\(.\)/\n/g' | grep '_' | wc -l`;
                # DEPTH_LEVEL=0;
                # if [ $COUNT_UNDERSCORES > 0 ]; then
                # fi
                DEPTH_LEVEL=`echo "$CURRENT" | grep -o \_  | wc -l`
                if [ "$CURRENT" != "" ]; then
                    ((DEPTH_LEVEL=DEPTH_LEVEL+1))
                fi

                # echo "DEPTH: $DEPTH_LEVEL"
                if [ "$CURRENT" == "" ]; then
                    VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1}' | sort | uniq`
                    if [ $DEPTH_LEVEL == 1 ]; then
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1 " " $2}' | sort | uniq`
                    fi
                    if [ $DEPTH_LEVEL == 2 ]; then
                        VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep -v '^$' | awk -F"_" '{print $1 " " $2 " " $3}' | sort | uniq`
                    fi
                else 
                    VARIABLE_GROUP=`awk -F= '{print $1 }' $DOTENV_FILE  | grep -v '^#' | grep "^"$CURRENT"_" | grep -v '^$' | awk -F"_" '{print $1 "_" $2}' | sort | uniq`
                    # echo "GRGOUP: $VARIABLE_GROUP"
                fi
                for i in $VARIABLE_GROUP; do
                    # @todo: fix this copy@paste stuff
                    if [ $DEPTH_LEVEL == 0 ]; then
                        PREFIX=`echo $i | awk -F"_" '{print $1}'`
                        # PREFIX=$CURRENT"_"$PREFIX 
                        REST=`echo $i | awk -F"_" '{print $2}'`
                    fi
                    if [ $DEPTH_LEVEL == 1 ]; then
                        PREFIX=`echo $i | awk -F"_" '{print $1 "_" $2}'`
                        REST=`echo $i | awk -F"_" '{print $3}'`
                        # MENU_LIST="$MENU_LIST $PREFIX More "
                    fi
#                    if [ $DEPTH_LEVEL == 2 ]; then
#                        PREFIX=`echo $i | awk -F"_" '{print $1 "_" $2 "_" $3}'`
#                        REST=`echo $i | awk -F"_" '{print $4}'`
##                        # MENU_LIST="$MENU_LIST $PREFIX More "
#                    fi
                    if [ $DEPTH_LEVEL == 3 ]; then
                        PREFIX=`echo $i | awk -F"_" '{print $1 "_" $2 "_" $3 "_" $4}'`
                        REST=`echo $i | awk -F"_" '{print $5}'`
                        # MENU_LIST="$MENU_LIST $PREFIX More "
                    fi

                    CNT_ITEMS=`cat $DOTENV_FILE | grep "$i=" | wc -l`
                    echo "ITEMS: $CNT_ITEMS" > $LOG_FILE;
                    if [ "$CNT_ITEMS" == "1" ]; then
                        VALUE=${!i}
                        echo "- Show value: $VALUE" > $LOG_FILE;
                        MENU_LIST="$MENU_LIST $PREFIX  $VALUE "
                    else
                        echo "- Show more"
                        MENU_LIST="$MENU_LIST $PREFIX More " > $LOG_FILE;
                    fi
              
                    # MENU_LIST="$MENU_LIST $i \"$VALUE\" "
                    # echo "- $i => $VALUE"
                done
                # if [ $DEPTH_LEVEL == 0 ]; then
                #     if [ "$CURRENT" == "" ]; then
                #         # MENU_LIST="$MENU_LIST \"\" Back "
                #         MENU_LIST="$MENU_LIST Back Back "
                #     else
                #         MENU_LIST="$MENU_LIST Back Back "
                #     fi
                # fi
                # MENU_LIST="$MENU_LIST \"\" "
                # MENU_LIST="$MENU_LIST Back Back "

                # exit;
                menu
            fi

            ;;
    esac
    mainLoop
}


###
# Display the help for this command.
###
function showHelp {
    echo "Usage: dotenv-editor [OPTION...]"
    echo ""
    echo "  -f, --file=FILE            use this dotenv configuration file"
    echo "  -l, --log=FILE             use this file for (debug) logging"
    echo "  -v, --verbose              emit verbose debugging messages"
    echo "  -V, --version              print program version"
    echo ""

}


###
# Display the version of this command.
###
function showVersion {
    echo "dotenv-edit $VERSION"
}


###
# Main application
###

# read the options
TEMP=`getopt -n "$0" -o f::l::h::V:: --long "+env-file,+log-file,help::,version::" -- "$@"`
eval set -- "$TEMP"

# FROM https://www.tutorialspoint.com/unix_commands/getopt.htm
# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -f|--env-file)
            DOTENV_FILE=${2#=}
            echo "- receiving option --env-file: $DOTENV_FILE";
            shift 2 ;;

        -l|--log-file)
            LOG_FILE=${2#=}
            echo "- receiving option --log-file: $LOG_FILE";
            shift 2 ;;

        -h|--help)
            showHelp;
            exit
            # shift 2;;
            ;;

        -V|--version)
            showVersion;
            exit
            # shift 2;;
            ;;

        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

# Set defaults in case optional parameters have not been set.
if [ -z "${DOTENV_FILE}" ]; then 
    DOTENV_FILE=.env
fi
if [ -z "${LOG_FILE}" ]; then 
    LOG_FILE=/dev/null
fi

# Check dependencies
checkDependencies;

# Display welcome message
welcomeMessage

# Select .env file (or copy from a sample file)
determineDotEnvFile

# Run the main program.
mainLoop
